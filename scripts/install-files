#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import argparse
import fnmatch
import os
import shutil
import sys

def main():
     parser = argparse.ArgumentParser()

     parser.add_argument("input_dirs", metavar="INPUT-DIR", nargs="+")
     parser.add_argument("output_dir", metavar="OUTPUT-DIR")
     parser.add_argument("-n", "--name", metavar="FILE-GLOB", action="append")

     args = parser.parse_args()

     subpaths = list()

     for input_dir in args.input_dirs:
          for root, dirs, files in os.walk(input_dir):
               matched_files = set()

               if args.name is None:
                    matched_files.update(files)
               else:
                    for name in args.name:
                         matched_files.update(fnmatch.filter(files, name))

               dir = root[len(input_dir) + 1:]

               for file in matched_files:
                    subpaths.append(os.path.join(dir, file))

          for subpath in subpaths:
               input_file = os.path.join(input_dir, subpath)
               output_file = os.path.join(args.output_dir, subpath)
               parent_dir = os.path.dirname(output_file)

               if not os.path.isdir(parent_dir):
                    os.makedirs(parent_dir)

               shutil.copy(input_file, output_file)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
